{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}

module Stack2nix
  ( Config(..)
  , Package(..)
  , RemotePkgConf(..)
  , parseStackYaml
  , stack2nix
  ) where

import qualified Data.ByteString as BS
import Data.Foldable
import Data.List
import Data.Monoid
import Data.Text (Text, unpack)
import qualified Data.Yaml as Y
import Data.Yaml (FromJSON(..), (.:), (.:?), (.!=))
import System.Exit
import System.FilePath
import System.FilePath.Glob
import System.Process

data Config =
  Config { resolver  :: Text
         , packages  :: [Package]
         , extraDeps :: [Text]
         }
  deriving (Show, Eq)

data Package = LocalPkg FilePath
             | RemotePkg RemotePkgConf
             deriving (Show, Eq)

data RemotePkgConf =
  RemotePkgConf { gitUrl :: Text
                , commit :: Text
                , extraDep :: Bool
                }
  deriving (Show, Eq)

instance FromJSON Config where
  parseJSON (Y.Object v) =
    Config <$>
    v .: "resolver" <*>
    v .: "packages" <*>
    v .: "extra-deps"
  parseJSON _ = fail "Expected Object for Config value"

instance FromJSON Package where
  parseJSON (Y.String v) = return $ LocalPkg $ unpack v
  parseJSON obj@(Y.Object _) = RemotePkg <$> parseJSON obj
  parseJSON _ = fail "Expected String or Object for Package value"

instance FromJSON RemotePkgConf where
  parseJSON (Y.Object v) = do
    loc <- v .: "location"
    git <- loc .: "git"
    commit <- loc .: "commit"
    extra <- v .:? "extra-dep" .!= False
    return $ RemotePkgConf git commit extra
  parseJSON _ = fail "Expected Object for RemotePkgConf value"

parseStackYaml :: BS.ByteString -> Maybe Config
parseStackYaml = Y.decode

{-
  Unused parts of sample input stack.yaml

  * resolver
  * extraDep and extraDeps
-}

-- TODO: factor out pure parts
stack2nix :: FilePath -> IO ()
stack2nix fname = do
  yaml <- BS.readFile fname
  case parseStackYaml yaml of
    Just config -> toNix (takeDirectory fname) config
    Nothing -> error $ "Failed to parse " <> fname

toNix :: FilePath -> Config -> IO ()
toNix baseDir Config{..} = do
  traverse_ genNixFile packages
  nixFiles <- glob "*.nix"
  writeFile "default.nix" $ defaultNix $ map overrideFor nixFiles
    where
      genNixFile :: Package -> IO ()
      genNixFile (LocalPkg relPath) = runCabal2nix dir Nothing Nothing
        where
          dir = if relPath == "." then baseDir else baseDir </> relPath
      genNixFile (RemotePkg RemotePkgConf{..}) = runCabal2nix (unpack gitUrl) (Just commit) Nothing

      overrideFor :: FilePath -> String
      overrideFor nixFile = "    " <> name <> " = super.callPackage " <> nixFile <> " { };"
        where
          name = dropExtension $ takeFileName nixFile

      defaultNix overrides = unlines $
        [ "{ pkgs ? (import <nixpkgs> {})"
        , ", compiler ? pkgs.haskell.packages.ghc802"
        , "}:"
        , ""
        , "with (import <nixpkgs/pkgs/development/haskell-modules/lib.nix> { inherit pkgs; });"
        , ""
        , "compiler.override {"
        , "  overrides = self: super: {"
        ] ++ overrides ++
        -- TODO: detect when it's appropriate to use justStaticExecutables
        [ "    haskell-multi-proj-demo1-static = justStaticExecutables self.haskell-multi-proj-demo1;"
        , "  };"
        , "}"
        ]

runCabal2nix :: FilePath -> Maybe Text -> Maybe FilePath -> IO ()
runCabal2nix dir commit subpath = do
  result <- cabal2nix dir commit subpath
  case result of
    Just nix -> writeFile (pname nix <> ".nix") nix
    Nothing -> error $ "cabal2nix failed on directory: " <> dir
  where
    pname :: String -> String
    pname = pname' . lines

    pname' :: [String] -> String
    pname' [] = error "nix expression generated by cabal2nix is missing the 'pname' attr"
    pname' (x:xs) =
      case stripPrefix "  pname = \"" x of
        Just x' -> takeWhile (/= '"') x'
        Nothing -> pname' xs

-- TODO: avoid calling process; use cabal2nix as lib
cabal2nix :: FilePath -> Maybe Text -> Maybe FilePath -> IO (Maybe String)
cabal2nix dir commit subpath = do
  (exitCode, stdout, _stderr) <- readProcessWithExitCode "/home/jake/.local/bin/cabal2nix" args ""
  case exitCode of
    ExitSuccess -> return $ Just stdout
    _ -> return Nothing
  where
    args :: [String]
    args = concat
      [ maybe [] (\c -> ["--revision", unpack c]) commit
      , maybe [] (\d -> ["--subpath", d]) subpath
      , [dir]
      ]
